image: alpine:3.8

stages:
  - build
  - publish
  - deploy_dev
  - deploy_hom
  - deploy_hotfix

build:
  stage: build
  before_script:
    # Install Requirements
    - apk -v --update add nodejs npm jq
    # Check Requirements
    - node --version
    - npm --version
    # JQ Parse
    - jq -r '.version' package.json > version
  script:
    - npm install
    - npm install -g @angular/cli
    - ng build --output-path ./build
  artifacts:
    paths:
      - build/
      - version
  only:
    - develop
    - hotfix
    
#sonarqb:
#  stage: build
#  image: 10.91.206.94:8081/docker/sonar-scanner:latest
#  script:
#    - sonar-scanner -Dsonar.host.url=http://10.91.206.68:9000 -Dsonar.login=$SONAR_TOKEN
#  only:
#    - develop
#    - hotfix

publish:
  stage: publish
  dependencies:
    - build
  before_script:
    # Add zip
    - apk add zip
    - zip --version
    # Install jfrog requirements
    - apk add curl
    - apk add libc6-compat
    # Set VERSIONJSON Variable
    - VERSIONJSON=`cat version`
    # Install JFrog CLI
    - curl -fL https://getcli.jfrog.io | sh
    # Configure Artifactory instance with JFrog CLI
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS gerdau-artifactory
    - ./jfrog rt c show
  script:
    # Zip build
    - zip -r build.zip build/
    # Push build to artifactory
    #- curl -u$ARTIFACTORY_USER:$ARTIFACTORY_PASS -T build.zip "http://10.91.206.94:8081/artifactory/g2l-webportal-web-snap/g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}.zip"
    # Upload artifact
    - mv build.zip g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}.zip
    - ./jfrog rt u g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}.zip g2l-webportal-web-snap --build-name=g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8} --build-number=${CI_PIPELINE_ID}
    # Build Publish
    - ./jfrog rt bp g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8} ${CI_PIPELINE_ID}
  only:
    - develop
    - hotfix

deploy_dev:
  stage: deploy_dev
  dependencies:
    - build
  before_script:
    # Install curl
    - apk add curl
    ## Set VERSIONJSON Variable
    - VERSIONJSON=`cat version`
  script:
    - "curl https://gocd.gerdau.digital/go/api/pipelines/g2l-webportal-web-dev/schedule -u \"$GOCD_USER:$GOCD_PASS\" -H 'Accept: application/vnd.go.cd.v1+json' -H 'X-GoCD-Confirm: true' -H 'Content-Type: application/json' -X POST -d \"{\"environment_variables\": [{\"secure\": false,\"name\": \"artifact\",\"value\": \"g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}.zip\"}, {\"secure\": false,\"name\": \"buildnumber\",\"value\":\"${CI_PIPELINE_ID}\"}, {\"secure\": false,\"name\": \"buildname\",\"value\": \"g2l-webportal-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}\"}]}\""
  only:
    - develop

deploy_hom:
  stage: deploy_hom
  dependencies:
    - build
  before_script:
    # Install curl
    - apk add curl
  script:
    - "curl https://gocd.gerdau.digital/go/api/pipelines/${CI_PROJECT_NAME}-hom/schedule -u \"$GOCD_USER:$GOCD_PASS\" -H 'Accept: application/vnd.go.cd.v1+json' -H 'X-GoCD-Confirm: true' -H 'Content-Type: application/json' -X POST"
  only:
    - release

deploy_hotfix:
  stage: deploy_hotfix
  dependencies:
    - build
  before_script:
    # Install curl
    - apk add curl
    ## Set VERSIONJSON Variable
    - VERSIONJSON=`cat version`
  script:
    - "curl https://gocd.gerdau.digital/go/api/pipelines/${CI_PROJECT_NAME}-web-hotfix/schedule -u \"$GOCD_USER:$GOCD_PASS\" -H 'Accept: application/vnd.go.cd.v1+json' -H 'X-GoCD-Confirm: true' -H 'Content-Type: application/json' -X POST -d \"{\"environment_variables\": [{\"secure\": false,\"name\": \"artifact\",\"value\": \"${CI_PROJECT_NAME}-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}.zip\"}, {\"secure\": false,\"name\": \"buildnumber\",\"value\":\"${CI_PIPELINE_ID}\"}, {\"secure\": false,\"name\": \"buildname\",\"value\": \"${CI_PROJECT_NAME}-web.v$VERSIONJSON-${CI_COMMIT_SHA:0:8}\"}]}\""
  only:
    - hotfix
